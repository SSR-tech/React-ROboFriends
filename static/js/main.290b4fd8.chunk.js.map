{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","robot.js","components/SearchResults.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","animals","robotCards","map","user","i","key","robots","username","SearchResults","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","animal","fetch","then","response","json","users","filterRobotCards","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.290b4fd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-dark-red dib br3 grow  card\">\n      <h1>RoboFriends</h1>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"Robot\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card.js\";\n\nconst CardList = ({ animals }) => {\n  const robotCards = animals.map((user, i) => {\n    return <Card key={i} id={animals[i].id} name={animals[i].name} email={animals[i].email} />;\n  });\n  return <div>{robotCards}</div>;\n};\n\nexport default CardList;\n","export const robots = [\n  {\n    id: 1,\n    name: \"Leanne Graham\",\n    username: \"Bret\",\n    email: \"Sincere@april.biz\",\n  },\n  {\n    id: 2,\n    name: \"Ervin Howell\",\n    username: \"Antonette\",\n    email: \"Shanna@melissa.tv\",\n  },\n  {\n    id: 3,\n    name: \"Clementine Bauch\",\n    username: \"Samantha\",\n    email: \"Nathan@yesenia.net\",\n  },\n  {\n    id: 4,\n    name: \"Patricia Lebsack\",\n    username: \"Karianne\",\n    email: \"Julianne.OConner@kory.org\",\n  },\n  {\n    id: 5,\n    name: \"Chelsey Dietrich\",\n    username: \"Kamren\",\n    email: \"Lucio_Hettinger@annie.ca\",\n  },\n  {\n    id: 6,\n    name: \"Mrs. Dennis Schulist\",\n    username: \"Leopoldo_Corkery\",\n    email: \"Karley_Dach@jasper.info\",\n  },\n  {\n    id: 7,\n    name: \"Kurtis Weissnat\",\n    username: \"Elwyn.Skiles\",\n    email: \"Telly.Hoeger@billy.biz\",\n  },\n  {\n    id: 8,\n    name: \"Nicholas Runolfsdottir V\",\n    username: \"Maxime_Nienow\",\n    email: \"Sherwood@rosamond.me\",\n  },\n  {\n    id: 9,\n    name: \"Glenna Reichert\",\n    username: \"Delphine\",\n    email: \"Chaim_McDermott@dana.io\",\n  },\n  {\n    id: 10,\n    name: \"Clementina DuBuque\",\n    username: \"Moriah.Stanton\",\n    email: \"Rey.Padberg@karina.biz\",\n  },\n];\n","import React from \"react\";\n\nconst SearchResults = ({ searchChange }) => {\n  return (\n    <div>\n      <input type=\"search\" placeholder=\"Search Robot\" className=\"searchBox\" onChange={searchChange} />\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return <div style={{ overflowY: \"scroll\", border: \"1rem groove red\", height: \"100rem\" }}>{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1 className=\"mainTitle\">Ooops. We'r sorry for this</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport { robots } from \"../robot\";\nimport SearchResults from \"../components/SearchResults\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      animal: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ animal: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { animal, searchField } = this.state;\n    const filterRobotCards = animal.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc mainBackground\">\n        <h1 className=\"mainTitle\">RobotFriends</h1>\n        <SearchResults searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList animals={(robots, filterRobotCards)} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}